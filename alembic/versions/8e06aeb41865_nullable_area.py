"""nullable area

Revision ID: 8e06aeb41865
Revises: c8f7ceab9f3e
Create Date: 2024-08-24 14:44:24.683557
"""

from typing import Sequence, Union
from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision: str = "8e06aeb41865"
down_revision: Union[str, None] = "c8f7ceab9f3e"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # Adjust this section manually
    with op.batch_alter_table("posts", schema=None) as batch_op:
        batch_op.alter_column("area_id", existing_type=sa.INTEGER(), nullable=True)

    with op.batch_alter_table("subscriptions", schema=None) as batch_op:
        # Ensure user_id remains non-nullable unless intentionally set to nullable
        batch_op.alter_column("user_id", existing_type=sa.INTEGER(), nullable=False)
        # Ensure foreign key has a name
        batch_op.drop_constraint("fk_subscriptions_area", type_="foreignkey")
        batch_op.create_foreign_key(
            "fk_subscriptions_area", "areas", ["area_id"], ["id"]
        )

    # Remove the autogenerated drop_table if it doesn't need to exist
    # op.drop_table('_alembic_tmp_areas')


def downgrade() -> None:
    # Adjust the downgrade operation accordingly
    with op.batch_alter_table("subscriptions", schema=None) as batch_op:
        batch_op.drop_constraint("fk_subscriptions_area", type_="foreignkey")
        batch_op.create_foreign_key(
            "fk_subscriptions_area", "areas", ["area_id"], ["id"]
        )
        batch_op.alter_column("user_id", existing_type=sa.INTEGER(), nullable=False)
        batch_op.alter_column("area_id", existing_type=sa.INTEGER(), nullable=True)

    with op.batch_alter_table("posts", schema=None) as batch_op:
        batch_op.alter_column("area_id", existing_type=sa.INTEGER(), nullable=False)
